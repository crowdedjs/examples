{"version":3,"file":"bundle.js","sources":["src/BehaviorTreeStatus.ts","src/Error/BehaviorTreeError.ts","src/Error/Errors.ts","src/Node/ActionNode.ts","src/Node/InverterNode.ts","src/Node/ParallelNode.ts","src/NodeEnumerator.ts","src/Node/SelectorNode.ts","src/Node/RepeatNode.ts","src/Node/UntilFailNode.ts","src/Node/SequenceNode.ts","src/StackNode.ts","src/Stack.ts","src/BehaviorTreeBuilder.ts","src/StateData.ts"],"sourcesContent":["/**\r\n * The return type when invoking behavior tree nodes.\r\n */\r\nenum BehaviorTreeStatus {\r\n    Success = \"SUCCESS\",\r\n    Failure = \"FAILURE\",\r\n    Running = \"RUNNING\",\r\n}\r\n\r\nexport default BehaviorTreeStatus;\r\n","export default class BehaviorTreeError extends Error {\r\n}\r\n","enum Errors {\r\n    NO_NODES                   = \"Cannot create a behavior tree with zero nodes.\",\r\n    SPLICE_UNNESTED_TREE       = \"Cannot splice an unnested sub-tree. There must be a parent-tree.\",\r\n    INVERTER_NO_CHILDREN       = \"InverterNode must have a child node!\",\r\n    INVERTER_MULTIPLE_CHILDREN = \"Can't add more than a single child to InverterNode!\",\r\n    UNNESTED_ACTION_NODE       = \"Can't create an unnested ActionNode. It must be a leaf node.\",\r\n    NO_RETURN_VALUE            = \"Node must return a BehaviorTreeStatus\",\r\n}\r\n\r\nexport default Errors;\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport BehaviorTreeError from \"../Error/BehaviorTreeError.js\";\r\nimport Errors from \"../Error/Errors.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * A behavior tree leaf node for running an action\r\n *\r\n * @property {string}                                   name - The name of the node\r\n * @property {(state: StateData) => BehaviorTreeStatus} fn   - Function to invoke for the action.\r\n */\r\nexport default class ActionNode implements BehaviorTreeNodeInterface {\r\n    public constructor(\r\n        public readonly name: string,\r\n        public readonly fn: (state: StateData) => Promise<BehaviorTreeStatus>,\r\n    ) {\r\n    }\r\n\r\n    public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n        const result = await this.fn(state);\r\n        if (!result) {\r\n            throw new BehaviorTreeError(Errors.NO_RETURN_VALUE);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport BehaviorTreeError from \"../Error/BehaviorTreeError.js\";\r\nimport Errors from \"../Error/Errors.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./ParentBehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * Decorator node that inverts the success/failure of its child.\r\n *\r\n * @property {string} name - The name of the node\r\n */\r\nexport default class InverterNode implements ParentBehaviorTreeNodeInterface {\r\n    /**\r\n     * The child to be inverted\r\n     */\r\n    private childNode?: BehaviorTreeNodeInterface;\r\n\r\n    public constructor(public readonly name: string) {\r\n    }\r\n\r\n    public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n        if (!this.childNode) {\r\n            throw new BehaviorTreeError(Errors.INVERTER_NO_CHILDREN);\r\n        }\r\n\r\n        const result = await this.childNode.tick(state);\r\n        if (result === BehaviorTreeStatus.Failure) {\r\n            return BehaviorTreeStatus.Success;\r\n        } else if (result === BehaviorTreeStatus.Success) {\r\n            return BehaviorTreeStatus.Failure;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public addChild(child: BehaviorTreeNodeInterface): void {\r\n        if (!!this.childNode) {\r\n            throw new BehaviorTreeError(Errors.INVERTER_MULTIPLE_CHILDREN);\r\n        }\r\n\r\n        this.childNode = child;\r\n    }\r\n}\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./ParentBehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * Runs child's nodes in parallel.\r\n *\r\n * @property {string} name                 - The name of the node.\r\n * @property {number} requiredToFail    - Number of child failures required to terminate with failure.\r\n * @property {number} requiredToSucceed - Number of child successes required to terminate with success.\r\n */\r\nexport default class ParallelNode implements ParentBehaviorTreeNodeInterface {\r\n    /**\r\n     * List of child nodes.\r\n     *\r\n     * @type {BehaviorTreeNodeInterface[]}\r\n     */\r\n    private children: BehaviorTreeNodeInterface[] = [];\r\n\r\n    public constructor(\r\n        public readonly name: string,\r\n        public readonly requiredToFail: number,\r\n        public readonly requiredToSucceed: number,\r\n    ) {\r\n    }\r\n\r\n    public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n        const statuses: BehaviorTreeStatus[] = await Promise.all(this.children.map((c) => this.tickChildren(state, c)));\r\n        const succeeded                      = statuses.filter((x) => x === BehaviorTreeStatus.Success).length;\r\n        const failed                         = statuses.filter((x) => x === BehaviorTreeStatus.Failure).length;\r\n\r\n        if (this.requiredToSucceed > 0 && succeeded >= this.requiredToSucceed) {\r\n            return BehaviorTreeStatus.Success;\r\n        }\r\n        if (this.requiredToFail > 0 && failed >= this.requiredToFail) {\r\n            return BehaviorTreeStatus.Failure;\r\n        }\r\n\r\n        return BehaviorTreeStatus.Running;\r\n    }\r\n\r\n    public addChild(child: BehaviorTreeNodeInterface): void {\r\n        this.children.push(child);\r\n    }\r\n\r\n    private async tickChildren(state: StateData, child: BehaviorTreeNodeInterface): Promise<BehaviorTreeStatus> {\r\n        try {\r\n            return await child.tick(state);\r\n        } catch (e) {\r\n            return BehaviorTreeStatus.Failure;\r\n        }\r\n    }\r\n}\r\n","import BehaviorTreeNodeInterface from \"./Node/BehaviorTreeNodeInterface.js\";\r\n\r\nexport default class NodeEnumerator implements Iterable<BehaviorTreeNodeInterface> {\r\n    public currentIndex: number = 0;\r\n\r\n    public get current(): BehaviorTreeNodeInterface {\r\n        return this.nodes[this.currentIndex];\r\n    }\r\n\r\n    public constructor(public nodes: BehaviorTreeNodeInterface[]) {\r\n        this.nodes = nodes;\r\n    }\r\n\r\n    public [Symbol.iterator](): Iterator<BehaviorTreeNodeInterface> {\r\n        return {\r\n            next: (): IteratorResult<BehaviorTreeNodeInterface> => {\r\n                let result;\r\n\r\n                if (this.currentIndex < this.nodes.length) {\r\n                    result = {value: this.current, done: false};\r\n                    this.next();\r\n                } else {\r\n                    result = {done: true};\r\n                }\r\n\r\n                return result;\r\n            },\r\n        };\r\n    }\r\n\r\n    public next(): boolean {\r\n        if (this.hasNext()) {\r\n            this.currentIndex++;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public hasNext(): boolean {\r\n        return !!this.nodes[this.currentIndex + 1];\r\n    }\r\n\r\n    public reset(): void {\r\n        this.currentIndex = 0;\r\n    }\r\n}\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport NodeEnumerator from \"../NodeEnumerator.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./ParentBehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * Selects the first node that succeeds. Tries successive nodes until it finds one that doesn't fail.\r\n *\r\n * @property {string} name - The name of the node.\r\n */\r\nexport default class SelectorNode implements ParentBehaviorTreeNodeInterface {\r\n    /**\r\n     * List of child nodes.\r\n     *\r\n     * @type {BehaviorTreeNodeInterface[]}\r\n     */\r\n    private children: BehaviorTreeNodeInterface[] = [];\r\n\r\n    /**\r\n     * Enumerator to keep state\r\n     */\r\n    private enumerator?: NodeEnumerator;\r\n\r\n    public constructor(public readonly name: string, private readonly keepState: boolean = false) {\r\n    }\r\n\r\n    public init(): void {\r\n        this.enumerator = new NodeEnumerator(this.children);\r\n    }\r\n\r\n    public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n        if (!this.enumerator || !this.keepState) {\r\n            this.init();\r\n        }\r\n\r\n        if (!this.enumerator.current) {\r\n            return BehaviorTreeStatus.Running;\r\n        }\r\n\r\n        do {\r\n            const status = await this.enumerator.current.tick(state);\r\n            if (status !== BehaviorTreeStatus.Failure) {\r\n                if (status === BehaviorTreeStatus.Success) {\r\n                    this.enumerator.reset();\r\n                }\r\n\r\n                return status;\r\n            }\r\n\r\n        } while (this.enumerator.next());\r\n        this.enumerator.reset();\r\n\r\n        return BehaviorTreeStatus.Failure;\r\n    }\r\n\r\n    public addChild(child: BehaviorTreeNodeInterface): void {\r\n        this.children.push(child);\r\n    }\r\n}\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport NodeEnumerator from \"../NodeEnumerator.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./ParentBehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * Runs child nodes in sequence, until one fails.\r\n *\r\n * @property {string} name - The name of the node.\r\n */\r\nexport default class RepeatNode implements ParentBehaviorTreeNodeInterface {\r\n  /**\r\n   * List of child nodes.\r\n   *\r\n   * @type {BehaviorTreeNodeInterface[]}\r\n   */\r\n  private children: BehaviorTreeNodeInterface[] = [];\r\n\r\n  /**\r\n   * Enumerator to keep state\r\n   */\r\n  private enumerator?: NodeEnumerator;\r\n\r\n  public constructor(public readonly name: string, private readonly keepState: boolean = false) {\r\n  }\r\n\r\n  public init(): void {\r\n    this.enumerator = new NodeEnumerator(this.children);\r\n  }\r\n\r\n  public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n    if (!this.enumerator || !this.keepState) {\r\n      this.init();\r\n    }\r\n\r\n    if (!this.enumerator.current) {\r\n      return BehaviorTreeStatus.Running;\r\n    }\r\n    \r\n      do {\r\n        const status = await this.enumerator.current.tick(state);\r\n        if (status !== BehaviorTreeStatus.Success) {\r\n          if (status === BehaviorTreeStatus.Failure) {\r\n            this.enumerator.reset();\r\n          }\r\n\r\n          return BehaviorTreeStatus.Running;\r\n        }\r\n\r\n      } while (this.enumerator.next());\r\n      this.enumerator.reset();\r\n      \r\n    \r\n\r\n    return BehaviorTreeStatus.Running;\r\n  }\r\n\r\n  public addChild(child: BehaviorTreeNodeInterface): void {\r\n    this.children.push(child);\r\n  }\r\n}\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport NodeEnumerator from \"../NodeEnumerator.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./ParentBehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * Runs child nodes in sequence, until one fails.\r\n *\r\n * @property {string} name - The name of the node.\r\n */\r\nexport default class UntilFailNode implements ParentBehaviorTreeNodeInterface {\r\n  /**\r\n   * List of child nodes.\r\n   *\r\n   * @type {BehaviorTreeNodeInterface[]}\r\n   */\r\n  private children: BehaviorTreeNodeInterface[] = [];\r\n\r\n  /**\r\n   * Enumerator to keep state\r\n   */\r\n  private enumerator?: NodeEnumerator;\r\n\r\n  public constructor(public readonly name: string, private readonly keepState: boolean = false) {\r\n  }\r\n\r\n  public init(): void {\r\n    this.enumerator = new NodeEnumerator(this.children);\r\n  }\r\n\r\n  public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n    if (!this.enumerator || !this.keepState) {\r\n      this.init();\r\n    }\r\n\r\n    if (!this.enumerator.current) {\r\n      return BehaviorTreeStatus.Running;\r\n    }\r\n    \r\n      do {\r\n        const status = await this.enumerator.current.tick(state);\r\n        if (status !== BehaviorTreeStatus.Success) {\r\n          if (status === BehaviorTreeStatus.Failure) {\r\n            this.enumerator.reset();\r\n          }\r\n\r\n          return status;\r\n        }\r\n\r\n      } while (this.enumerator.next());\r\n      this.enumerator.reset();\r\n      \r\n    \r\n\r\n    return BehaviorTreeStatus.Running;\r\n  }\r\n\r\n  public addChild(child: BehaviorTreeNodeInterface): void {\r\n    this.children.push(child);\r\n  }\r\n}\r\n","import BehaviorTreeStatus from \"../BehaviorTreeStatus.js\";\r\nimport NodeEnumerator from \"../NodeEnumerator.js\";\r\nimport StateData from \"../StateData.js\";\r\nimport BehaviorTreeNodeInterface from \"./BehaviorTreeNodeInterface.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./ParentBehaviorTreeNodeInterface.js\";\r\n\r\n/**\r\n * Runs child nodes in sequence, until one fails.\r\n *\r\n * @property {string} name - The name of the node.\r\n */\r\nexport default class SequenceNode implements ParentBehaviorTreeNodeInterface {\r\n    /**\r\n     * List of child nodes.\r\n     *\r\n     * @type {BehaviorTreeNodeInterface[]}\r\n     */\r\n    private children: BehaviorTreeNodeInterface[] = [];\r\n\r\n    /**\r\n     * Enumerator to keep state\r\n     */\r\n    private enumerator?: NodeEnumerator;\r\n\r\n    public constructor(public readonly name: string, private readonly keepState: boolean = false) {\r\n    }\r\n\r\n    public init(): void {\r\n        this.enumerator = new NodeEnumerator(this.children);\r\n    }\r\n\r\n    public async tick(state: StateData): Promise<BehaviorTreeStatus> {\r\n        if (!this.enumerator || !this.keepState) {\r\n            this.init();\r\n        }\r\n\r\n        if (!this.enumerator.current) {\r\n            return BehaviorTreeStatus.Running;\r\n        }\r\n\r\n        do {\r\n            const status = await this.enumerator.current.tick(state);\r\n            if (status !== BehaviorTreeStatus.Success) {\r\n                if (status === BehaviorTreeStatus.Failure) {\r\n                    this.enumerator.reset();\r\n                }\r\n\r\n                return status;\r\n            }\r\n\r\n        } while (this.enumerator.next());\r\n        this.enumerator.reset();\r\n\r\n        return BehaviorTreeStatus.Success;\r\n    }\r\n\r\n    public addChild(child: BehaviorTreeNodeInterface): void {\r\n        this.children.push(child);\r\n    }\r\n}\r\n","// From https://github.com/ts-data/stack/blob/master/stack.ts\r\n// See MIT license at https://github.com/ts-data/stack/blob/master/LICENSE\r\nexport default class Node<T> {\r\n\r\n  public previous: Node<T>;\r\n  public data: T;\r\n\r\n  constructor(data: T, previous: Node<T>) {\r\n      this.previous = previous;\r\n      this.data = data;\r\n  }\r\n\r\n}\r\n","// From https://github.com/ts-data/stack/blob/master/stack.ts\r\n// See MIT license at https://github.com/ts-data/stack/blob/master/LICENSE\r\nimport Node from \"./StackNode.js\";\r\n\r\nexport default class Stack<TData> {\r\n\r\n  private _topNode: Node<TData> = undefined;\r\n  private _count: number = 0;\r\n\r\n  public count(): number {\r\n      return this._count;\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n      return this._topNode === undefined;\r\n  }\r\n\r\n  public push(value: TData): void {\r\n      // create a new Node and add it to the top\r\n      const node = new Node<TData>(value, this._topNode);\r\n      this._topNode = node;\r\n      this._count++;\r\n  }\r\n\r\n  public pop(): TData {\r\n      // remove the top node from the stack.\r\n      // the node at the top now is the one before it\r\n      const poppedNode = this._topNode;\r\n      this._topNode = poppedNode.previous;\r\n      this._count--;\r\n      return poppedNode.data;\r\n  }\r\n\r\n  public peek(): TData {\r\n      return this._topNode.data;\r\n  }\r\n\r\n}\r\n","import BehaviorTreeStatus from \"./BehaviorTreeStatus.js\";\r\nimport BehaviorTreeError from \"./Error/BehaviorTreeError.js\";\r\nimport Errors from \"./Error/Errors.js\";\r\nimport ActionNode from \"./Node/ActionNode.js\";\r\nimport BehaviorTreeNodeInterface from \"./Node/BehaviorTreeNodeInterface.js\";\r\nimport InverterNode from \"./Node/InverterNode.js\";\r\nimport ParallelNode from \"./Node/ParallelNode.js\";\r\nimport ParentBehaviorTreeNodeInterface from \"./Node/ParentBehaviorTreeNodeInterface.js\";\r\nimport SelectorNode from \"./Node/SelectorNode.js\";\r\nimport RepeatNode from \"./Node/RepeatNode.js\"\r\nimport UntilFailNode from \"./Node/UntilFailNode.js\"\r\nimport SequenceNode from \"./Node/SequenceNode.js\";\r\nimport Stack from \"./Stack.js\";\r\nimport StateData from \"./StateData.js\";\r\n\r\nexport default class BehaviorTreeBuilder {\r\n    /**\r\n     * Last node created\r\n     */\r\n    private curNode?: BehaviorTreeNodeInterface;\r\n\r\n    /**\r\n     * Stack node nodes that we are build via the fluent API.\r\n     *\r\n     * @type {Stack<ParentBehaviorTreeNodeInterface>}\r\n     */\r\n    private parentNodeStack: Stack<ParentBehaviorTreeNodeInterface> = new Stack<ParentBehaviorTreeNodeInterface>();\r\n\r\n    /**\r\n     * Create an action node.\r\n     *\r\n     * @param {string} name\r\n     * @param {(state: StateData) => BehaviorTreeStatus} fn\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public do(name: string, fn: (state: StateData) => Promise<BehaviorTreeStatus>): BehaviorTreeBuilder {\r\n        if (this.parentNodeStack.isEmpty()) {\r\n            throw new BehaviorTreeError(Errors.UNNESTED_ACTION_NODE);\r\n        }\r\n\r\n        const actionNode = new ActionNode(name, fn);\r\n        this.parentNodeStack.peek().addChild(actionNode);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Like an action node... but the function can return true/false and is mapped to success/failure.\r\n     *\r\n     * @param {string} name\r\n     * @param {(state: StateData) => boolean} fn\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public condition(name: string, fn: (state: StateData) => Promise<boolean>): BehaviorTreeBuilder {\r\n        return this.do(name, async (t) => await fn(t) ? BehaviorTreeStatus.Success : BehaviorTreeStatus.Failure);\r\n    }\r\n\r\n    /**\r\n     * Create an inverter node that inverts the success/failure of its children.\r\n     *\r\n     * @param {string} name\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public inverter(name: string): BehaviorTreeBuilder {\r\n        return this.addParentNode(new InverterNode(name));\r\n    }\r\n\r\n    /**\r\n     * Create a sequence node.\r\n     *\r\n     * @param {string}  name\r\n     * @param {boolean} keepState\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public sequence(name: string, keepState: boolean = true): BehaviorTreeBuilder {\r\n        return this.addParentNode(new SequenceNode(name, keepState));\r\n    }\r\n\r\n    /**\r\n     * Create a parallel node.\r\n     *\r\n     * @param {string} name\r\n     * @param {number} requiredToFail\r\n     * @param {number} requiredToSucceed\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public parallel(name: string, requiredToFail: number, requiredToSucceed: number): BehaviorTreeBuilder {\r\n        return this.addParentNode(new ParallelNode(name, requiredToFail, requiredToSucceed));\r\n    }\r\n\r\n    /**\r\n     * Create a selector node.\r\n     *\r\n     * @param {string}  name\r\n     * @param {boolean} keepState\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public selector(name: string, keepState: boolean = true): BehaviorTreeBuilder {\r\n        return this.addParentNode(new SelectorNode(name, keepState));\r\n    }\r\n\r\n    /**\r\n     * Create a repeat node.\r\n     *\r\n     * @param {string}  name\r\n     * @param {boolean} keepState\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public repeat(name: string, keepState: boolean = true): BehaviorTreeBuilder {\r\n        return this.addParentNode(new RepeatNode(name, keepState));\r\n    }\r\n\r\n    /**\r\n     * Create a until fail node.\r\n     *\r\n     * @param {string}  name\r\n     * @param {boolean} keepState\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public untilFail(name: string, keepState: boolean = true): BehaviorTreeBuilder {\r\n        return this.addParentNode(new UntilFailNode(name, keepState));\r\n    }\r\n\r\n    /**\r\n     * Splice a sub tree into the parent tree.\r\n     *\r\n     * @param {BehaviorTreeNodeInterface} subTree\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public splice(subTree: BehaviorTreeNodeInterface): BehaviorTreeBuilder {\r\n        if (this.parentNodeStack.isEmpty()) {\r\n            throw new BehaviorTreeError(Errors.SPLICE_UNNESTED_TREE);\r\n        }\r\n\r\n        this.parentNodeStack.peek().addChild(subTree);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Build the actual tree\r\n     * @returns {BehaviorTreeNodeInterface}\r\n     */\r\n    public build(): BehaviorTreeNodeInterface {\r\n            if (!this.curNode) {\r\n                throw new BehaviorTreeError(Errors.NO_NODES);\r\n            }\r\n\r\n            return this.curNode;\r\n    }\r\n\r\n    /**\r\n     * Ends a sequence of children.\r\n     *\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    public end(): BehaviorTreeBuilder {\r\n        this.curNode = this.parentNodeStack.pop();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the parent node to the parentNodeStack\r\n     *\r\n     * @param {ParentBehaviorTreeNodeInterface} node\r\n     * @returns {BehaviorTreeBuilder}\r\n     */\r\n    private addParentNode(node: ParentBehaviorTreeNodeInterface): BehaviorTreeBuilder {\r\n        if (!this.parentNodeStack.isEmpty()) {\r\n            this.parentNodeStack.peek().addChild(node);\r\n        }\r\n\r\n        this.parentNodeStack.push(node);\r\n\r\n        return this;\r\n    }\r\n}\r\n","/**\r\n * Represents time and state. Used to pass time values to behavior tree nodes.\r\n *\r\n * @property {number} deltaTime - The current time of this state representation\r\n * @property {object} state     - Any state data you would like to pass to the nodes.\r\n */\r\nexport default class StateData {\r\n    public constructor(public readonly deltaTime: number = 0, public readonly state: any = {}) {\r\n    }\r\n}\r\n"],"names":["Errors","BehaviorTreeStatus"],"mappings":"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"}